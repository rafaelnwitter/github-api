import { useCallback, useRef, useState } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import { ApolloClient, createHttpLink, InMemoryCache, gql } from "@apollo/client";
import { setContext } from '@apollo/client/link/context';
import styles from '../styles/Home.module.css'

export default function Home({ pinnedItems }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Github API Test</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://github.com/rafaelnwitter">my repositories</a>
        </h1>
    
        <div className={styles.grid}>
          {pinnedItems.map(item => {
            return (
              <a key={item.id} href={item.url} className={styles.card}>
                <h2>{ item.name }</h2>
                <p>Language: { item.languages.name }</p>
                <p>‚≠ê {item.stargazers.totalCount }</p>
              </a>
            )
          })}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://github.com/rafaelnwitter"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            Rafael Witt
          </span>
        </a>
      </footer>
    </div>
  )
}

export async function getStaticProps() {
  const httpLink = createHttpLink({
    uri: 'https://api.github.com/graphql',
  });

  const authLink = setContext((_, { headers }) => {
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${process.env.TOKEN}`,
      }
    }
  });

  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache()
  });

  const { data } = await client.query({
    query: gql`
      {
        user(login: "rafaelnwitter") {
          pinnedItems(first: 6, types: [REPOSITORY]) {
            totalCount
            edges {
              node {
                ... on Repository {
                  name
                  id
                  url
                  stargazers {
                    totalCount
                  }
                  languages(first: 1) {
                    nodes {
                      name
                    }               
                  }
                }
              }
            }
          }
        }
      }
    `
  });

  const { user } = data;
  const pinnedItems = user.pinnedItems.edges.map(edge => edge.node);

  return {
    props: {
      pinnedItems
    }
  }
}
